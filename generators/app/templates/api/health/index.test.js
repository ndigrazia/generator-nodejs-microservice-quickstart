const request = require('supertest')
const express = require('../../util/express')
const { apiRoot, apiRootTestEnv } = require('../../config')
const routes = require('.')

const app = () => express(apiRoot, routes)

test('GET /memory-usage 200', async () => {
  const { status, body } = await request(app())
    .get((`${apiRootTestEnv}/memory-usage`))
    .query({})

  expect(status).toBe(200)
  expect(body).toBeDefined()
  expect(typeof body).toBe('object')
  expect(body.formatted).toBeDefined()
  expect(typeof body.formatted).toBe('object')
  expect(body.formatted.rss).toBeDefined()
  expect(typeof body.formatted.rss).toBe('string')
  expect(body.formatted.heapTotal).toBeDefined()
  expect(typeof body.formatted.heapTotal).toBe('string')
  expect(body.formatted.external).toBeDefined()
  expect(typeof body.formatted.external).toBe('string')
  expect(body.formatted.arrayBuffers).toBeDefined()
  expect(typeof body.formatted.arrayBuffers).toBe('string')
})

test('GET /live 200', async () => {
  const { status, body } = await request(app())
    .get((`${apiRootTestEnv}/live`))
    .query({})

  expect(status).toBe(200)
  expect(body).toBeDefined()
  expect(typeof body).toBe('object')
  expect(body.condition).toBeDefined()
  expect(typeof body.condition).toBe('object')
  expect(body.condition.status).toBeDefined()
  expect(typeof body.condition.status).toBe('string')
  expect(body.uptime).toBeDefined()
  expect(typeof body.uptime).toBe('object')
  expect(body.uptime.hours).toBeDefined()
  expect(typeof body.uptime.hours).toBe('string')
  expect(body.uptime.minutes).toBeDefined()
  expect(typeof body.uptime.minutes).toBe('string')
  expect(body.uptime.seconds).toBeDefined()
  expect(typeof body.uptime.seconds).toBe('string')
})

test('GET /ready 200', async () => {
  const { status, body } = await request(app())
    .get((`${apiRootTestEnv}/ready`))
    .query({})

  expect(status).toBe(200)
  expect(body).toBeDefined()
  expect(typeof body).toBe('object')
  expect(body.status).toBeDefined()
  expect(typeof body.status).toBe('string')
})
